<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Flogo - Docs and Tutorials</title>
    <link>https://tibcosoftware.github.io/flogo/</link>
    <description>Recent content on Project Flogo - Docs and Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://tibcosoftware.github.io/flogo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quickstart</title>
      <link>https://tibcosoftware.github.io/flogo/getting-started/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/getting-started/quickstart/</guid>
      <description>We think it is awesome that you want to get started with Project Flogo! To get started you don&amp;rsquo;t even need to install anything other than Docker!
In this quickstart guide we&amp;rsquo;ll walk you through the prerequisites for getting up and running with your first Flogo app.
Getting Docker To make it easy to get started the Flogo Web UI is packaged up as a docker image which you can get from docker hub.</description>
    </item>
    
    <item>
      <title>Flogo Web UI</title>
      <link>https://tibcosoftware.github.io/flogo/getting-started/getting-started-webui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/getting-started/getting-started-webui/</guid>
      <description>Getting Started For an overview of how to get started, check out the Quickstart guide
Installing the Project Flogo Web UI Installing the Project Flogo Web UI is quite simple and requires nothing more than Docker pre-installed on your machine to fetch the Docker image.
Fetching and starting the Web UI To get started with the latest version of the Flogo Web UI paste this command in a terminal window:</description>
    </item>
    
    <item>
      <title>Flogo CLI</title>
      <link>https://tibcosoftware.github.io/flogo/getting-started/getting-started-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/getting-started/getting-started-cli/</guid>
      <description>Before you get started Before you can get started with the cli tools you need to make sure you the Go programming language installed.
Don&amp;rsquo;t forget to set your GOPATH variable and make sure that $GOPATH/bin is part of your path. (see here or here for more details)
 Installing the cli tools Now that you&amp;rsquo;ve installed the Go programming language there are a few commands you can run to install the cli and make developing with the cli tools even easier</description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://tibcosoftware.github.io/flogo/configuration/environment-vars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/configuration/environment-vars/</guid>
      <description>List of environment variables to configure the flogo engine
   Environment name Default value Info     FLOGO_LOG_DTFORMAT &amp;ldquo;2006-01-02 15:04:05.000&amp;rdquo; Sets the log date and time format   FLOGO_LOG_LEVEL &amp;ldquo;INFO&amp;rdquo; Sets the log level   FLOGO_RUNNER_TYPE &amp;ldquo;POOLED&amp;rdquo; Sets the type of the runner   FLOGO_RUNNER_WORKERS 5 Sets the number of workers   FLOGO_RUNNER_QUEUE 50 Sets the runner queue size   FLOGO_CONFIG_PATH &amp;ldquo;flogo.</description>
    </item>
    
    <item>
      <title>Flogo CLI</title>
      <link>https://tibcosoftware.github.io/flogo/development/interactive-labs/flogo-cli-interactive-lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/interactive-labs/flogo-cli-interactive-lab/</guid>
      <description>To check out the Flogo CLI without installing anything on your local machine check out this interactive tutorial</description>
    </item>
    
    <item>
      <title>Flogo Web UI</title>
      <link>https://tibcosoftware.github.io/flogo/development/interactive-labs/flogo-web-interactive-lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/interactive-labs/flogo-web-interactive-lab/</guid>
      <description>To check out the Flogo Web UI without installing anything on your local machine check out this interactive tutorial</description>
    </item>
    
    <item>
      <title>App structure</title>
      <link>https://tibcosoftware.github.io/flogo/development/apps/app-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/apps/app-structure/</guid>
      <description> Every Flogo app has the same basic structure and files for an application.
my_app/ flogo.json src/ my_app/ imports.go main.go vendor/  files The most important files are
 flogo.json : flogo project application configuration descriptor file imports.go : contains go imports for contributions (activities, triggers and models) used by the application main.go : main file for the engine.  directories The most important directories are
 src : the place where all code is stored vendor : the place where go libraries are stored  </description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/tensorflow/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/tensorflow/getting-started/</guid>
      <description>First and foremost, Flogo supports inferencing TensorFlow models, it does not support training of models using incoming data. The training should be performed in Python and the protobuf and checkpoints exported for inferencing at runtime in Flogo.
Before you can begin inferencing TensorFlow models within your Flogo Flows, youâ€™ll need to consider a few requirements.
Pre-requisites The TensorFlow dynamic lib must be installed on both your development machine, as well as the target machine/device.</description>
    </item>
    
    <item>
      <title>App Model</title>
      <link>https://tibcosoftware.github.io/flogo/development/apps/app-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/apps/app-configuration/</guid>
      <description>Flogo Application Model The flogo.json file is the metadata describing an application. The application dictates the dependencies to be used during compile time and can also be embeded into the compiled binary.
{ &amp;quot;name&amp;quot;: &amp;quot;myApp&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;flogo:app&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;My flogo application description&amp;quot;, &amp;quot;triggers&amp;quot;: [ { &amp;quot;id&amp;quot;: &amp;quot;my_rest_trigger&amp;quot;, &amp;quot;ref&amp;quot;: &amp;quot;github.com/TIBCOSoftware/flogo-contrib/trigger/rest&amp;quot;, &amp;quot;settings&amp;quot;: { &amp;quot;port&amp;quot;: &amp;quot;9233&amp;quot; }, &amp;quot;handlers&amp;quot;: [ { &amp;quot;actionId&amp;quot;: &amp;quot;my_simple_flow&amp;quot;, &amp;quot;settings&amp;quot;: { &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/test&amp;quot; } } ] } ], &amp;quot;actions&amp;quot;: [ { &amp;quot;id&amp;quot;: &amp;quot;my_simple_flow&amp;quot;, &amp;quot;ref&amp;quot;: &amp;quot;github.</description>
    </item>
    
    <item>
      <title>Inferencing</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/tensorflow/inferencing-tf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/tensorflow/inferencing-tf/</guid>
      <description>Before you begin with the ML Inferencing activity, refer to the Flows &amp;gt; TensorFlow &amp;gt; Getting Started documentation.
Overview of the Inference Activity The inference activity was built to support the concept of plugable frameworks, however the only supported framework is currently TensorFlow. The activity leverages the Golang API from TensorFlow. You don&amp;rsquo;t need Python or anything other than the TensorFlow dynamic library installed on your dev &amp;amp; target machine.</description>
    </item>
    
    <item>
      <title>App Properties</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/property-bag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/property-bag/</guid>
      <description>In Flogo, the concept of an application-level property bag is made available to flow developers that want to reuse properties across different flows, within the same application for trigger settings or as input to activities. Properties are exposed via the $property resolver and made available to the scopes defined in the mappings documentation.
Flow configuration Properties are defined within the root of the application json, as shown below via the properties element.</description>
    </item>
    
    <item>
      <title>Flow Input/Output Params</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/io-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/io-parameters/</guid>
      <description>For Flogo a Flow is more inline with the concept of a function, that is, a Flow has both input and output parameters. The concept of decoupling a trigger from a flow is a key part of supporting multiple triggers and re-use/sharing of a flow. A Flow can now operate against the data that it has defined within its declartion, it otherwords, just like a function, the scope of data that a Flow can operate against must reside within either the Flow context (or as an environment variable).</description>
    </item>
    
    <item>
      <title>Iterator</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/iterators/</guid>
      <description>What is an iterator in Flogo? The iterator construct in Flogo enables the iteration of a single activity. The configuration elements are associated with that activity. In Flogo, you can iterate only over a single activity. The iterator acts much like a for loop in any procedural language.
Flow configuration Iterators are associated with an activity. The activity type must be defined as a type 2, which indicates that it is to be iterated over.</description>
    </item>
    
    <item>
      <title>Mappings</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/mapping/</guid>
      <description>What are mappings? A mapping in a Flogo Flow can be used to assign the value of a variable to that of an input parameters of an activity or to the value of another flow scoped variable.
Types of mappings If you peak under the covers, you&amp;rsquo;ll note that we have a number of different mapping types supported in the Flogo engine. These include:
   Type Description     1 Direct mapping.</description>
    </item>
    
    <item>
      <title>Building your first activity</title>
      <link>https://tibcosoftware.github.io/flogo/development/extensions/building-your-first-activity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/extensions/building-your-first-activity/</guid>
      <description>Creating a new activity for Project Flogo is not that hard! Let&amp;rsquo;s walk through the steps required to create a simple activity.
Please make sure that you have installed the flogo tools as described in Getting Started &amp;gt; Flogo CLI.
 The basic framework The easiest way to start creating activities is to have the flogogen CLI create the basic framework for you. The flogogen CLI takes two important parameters to create the framework for activities:</description>
    </item>
    
    <item>
      <title>Continuously testing Flogo activities</title>
      <link>https://tibcosoftware.github.io/flogo/development/extensions/continuously-testing-flogo-activities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/extensions/continuously-testing-flogo-activities/</guid>
      <description>Depending on where you store the source code and how publicly you want to have the code available you have a few options to continuously testing Flogo activities. Let&amp;rsquo;s look at Jenkins when using a local git server and Travis-CI for activities on GitHub
Intro The project structure we&amp;rsquo;ll use has separate folders for activities and triggers. A sample layout would look like this:
â”œâ”€â”€â”€&amp;lt;Repo root&amp;gt; â”‚ â””â”€â”€â”€activity | | â””â”€â”€â”€&amp;lt;my-activity&amp;gt; | | |â”€â”€â”€&amp;lt;all my files&amp;gt; â”‚ â””â”€â”€â”€trigger | â””â”€â”€â”€&amp;lt;my-trigger&amp;gt; | |â”€â”€â”€&amp;lt;all my files&amp;gt;  A real life repository I created looks like this.</description>
    </item>
    
    <item>
      <title>Application Configuration Provider</title>
      <link>https://tibcosoftware.github.io/flogo/development/extensions/application-configuration-provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/extensions/application-configuration-provider/</guid>
      <description>Unless you want to provide the application configuration (for example: flogo.json) in a different way or format you should not worry about this feature.
We have provided an extension mechanism for you to override the default way of providing the application configuration if needed.
Topics  Default behavior Embedded configuration Custom configuration  Default behavior Out of the box, the default behavior will be as follows:
 Configuration will be passed to the engine in the JSON format Default path for the JSON file will be in the same directory as the application&amp;rsquo;s binary Default name for the JSON file will be &amp;ldquo;flogo.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://tibcosoftware.github.io/flogo/flogo-cli/tools-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/flogo-cli/tools-overview/</guid>
      <description>Project Flogo provides different command-line interfaces and which you need depends on the task you need to execute.
 flogo: This CLI gives you the ability to build flows and microservices. With this tool you can, among other things, create your applications, build applications and install new extensions. This tool is great to use with Continuous Integration and Continuous Deployment tools like Jenkins and Travis-CI. flogodevice: This CLI gives you the ability to build your apps to run on different types of devices using the device profile option.</description>
    </item>
    
    <item>
      <title>flogo</title>
      <link>https://tibcosoftware.github.io/flogo/flogo-cli/flogo-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/flogo-cli/flogo-cli/</guid>
      <description>The flogo CLI tool gives you the ability to build flows and microservices. With this tool you can, among other things, create your applications, build applications and install new extensions. It is also great to use with Continuous Integration and Continuous Deployment tools like Jenkins and Travis-CI. Below is a complete list of all all commands supported, including samples on how to use them.
Please make sure that you have installed the flogo tools as described in Getting Started &amp;gt; Flogo CLI</description>
    </item>
    
    <item>
      <title>flogogen</title>
      <link>https://tibcosoftware.github.io/flogo/flogo-cli/flogogen-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/flogo-cli/flogogen-cli/</guid>
      <description>The flogogen CLI tool is the tool you want to use if you&amp;rsquo;re looking to extend the functionality that Project Flogo offers out of the box, this is the tool you want to use. Flogogen generates the scafolding used by extensions (activity/trigger) developers to build new extensions.. Below is a complete list of all all commands supported, including samples on how to use them.
Please make sure that you have installed the flogo tools as described in Getting Started &amp;gt; Flogo CLI</description>
    </item>
    
    <item>
      <title>flogodevice</title>
      <link>https://tibcosoftware.github.io/flogo/flogo-cli/flogodevice-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/flogo-cli/flogodevice-cli/</guid>
      <description>The flogodevice CLI tool gives you the ability to build your apps to run on different types of devices using the device profile option. Below is a complete list of all all commands supported, including samples on how to use them.
Please make sure that you have installed the flogo tools as described in Getting Started &amp;gt; Flogo CLI and that PlatformIO is installed as well.
 build Build the flogo device application</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://tibcosoftware.github.io/flogo/deployments/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/deployments/docker/</guid>
      <description>Flogo is an Ultralight Edge Microservices Framework so building docker images is not only really easy, because it can embed all dependencies it can also run inside of super small docker containers.
Using flogo Out of the box, Flogo has the option to build a docker container from the app.
flogo build -e -docker &amp;lt;trigger id&amp;gt;  The above command will build a Flogo app, with embedded configuration (-e), and create a docker image where it can expose the PORT based on which trigger ID you specify.</description>
    </item>
    
    <item>
      <title>Cloud Foundry</title>
      <link>https://tibcosoftware.github.io/flogo/deployments/cloud-foundry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/deployments/cloud-foundry/</guid>
      <description>Cloud Foundry is an open-source platform as a service (PaaS) that provides you with a choice of clouds, developer frameworks, and application services.
If you want to run Flogo apps in a Cloud Foundry environment, you have two options:
 Using docker containers Using the binary buildpack  If you want to try out Pivotal Cloud Foundry, you might to check out PCF Dev and follow the first three steps to get your environment up and running.</description>
    </item>
    
    <item>
      <title>Kubernetes demo scenario</title>
      <link>https://tibcosoftware.github.io/flogo/deployments/kubernetes/kubernetes-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/deployments/kubernetes/kubernetes-demo/</guid>
      <description>This demo scneario will help you get up and running with a Flogo demo on Kubernetes. We&amp;rsquo;ll assume you have the following tools installed already. If that is not the case, you might want to install them first. Our Getting Started guide walks you through the installation of Go, the Flogo CLI and Go Dep
 curl golang 1.9+ go dep flogo docker kubectl  In the scenario you&amp;rsquo;ll find a bunch of code blocks from which you can copy the code directly to your terminal.</description>
    </item>
    
    <item>
      <title>How-to for IOT</title>
      <link>https://tibcosoftware.github.io/flogo/iot/how-to/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/iot/how-to/</guid>
      <description>Creating a flogo application is easy and we&amp;rsquo;ve outlined the steps for you in this howto guide. This guide will walk you through the steps required to create a simple flogo application which can also be used on an IOT device.
Prerequisites Before you can get started building IOT applications with flogo, you need to have the following prerequisites installed:
 The Go programming language should be installed. In order to simplify development and building in Go, we recommend using the gb build tool.</description>
    </item>
    
    <item>
      <title>Raspberry Pi</title>
      <link>https://tibcosoftware.github.io/flogo/iot/device-pi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/iot/device-pi/</guid>
      <description>You can run your Flogo application on a Raspberry Pi device. (https://www.raspberrypi.org/) This documents contains all relevant information on this device including how to build.
Build To build a flogo application for Raspberry Pi, you simply use the build command with the appropriate enviroment variables set.
On mac or linux you execute the following command:
env GOARM=6 GOARCH=arm GOOS=linux flogo build -o  On windows you excute the following commands:</description>
    </item>
    
    <item>
      <title>Intel Edison</title>
      <link>https://tibcosoftware.github.io/flogo/iot/device-edison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/iot/device-edison/</guid>
      <description>You can run your Flogo application on a Edison device. This documents contains all relevant information on this device including how to build.
Build To build a flogo application for Edison, you simply use the build command with the appropriate enviroment variables set.
On mac or linux you execute the following command:
env GOARCH=386 GOOS=linux flogo build -o  On windows you excute the following commands:
SET GOARCH=386 SET GOOS=linux flogo build -o  This will compile your application and place the binary in the bin directory.</description>
    </item>
    
    <item>
      <title>C.H.I.P</title>
      <link>https://tibcosoftware.github.io/flogo/iot/device-chip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/iot/device-chip/</guid>
      <description>You can run your Flogo application on a C.H.I.P. device. (https://getchip.com/pages/chip) This documents contains all relevant information on this device including how to build.
Build To build a flogo application for C.H.I.P., you simply use the build command with the appropriate enviroment variables set.
On mac or linux you execute the following command:
env GOARM=7 GOARCH=arm GOOS=linux flogo build -o  On windows you excute the following commands:
SET GOARM=7 SET GOARCH=arm SET GOOS=linux flogo build -o  This will compile your application and place the binary in the bin directory.</description>
    </item>
    
    <item>
      <title>BeagleBone</title>
      <link>https://tibcosoftware.github.io/flogo/iot/device-beaglebone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/iot/device-beaglebone/</guid>
      <description>You can run your Flogo application on a BeagleBone device. (http://beagleboard.org/bone) This documents contains all relevant information on this device including how to build.
Build To build a flogo application for BeagleBone, you simply use the build command with the appropriate enviroment variables set.
On mac or linux you execute the following command:
env GOARM=7 GOARCH=arm GOOS=linux flogo build -o  On windows you excute the following commands:
SET GOARM=7 SET GOARCH=arm SET GOOS=linux flogo build -o  This will compile your application and place the binary in the bin directory.</description>
    </item>
    
    <item>
      <title>Flogo and Lambda</title>
      <link>https://tibcosoftware.github.io/flogo/faas/how-to/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/faas/how-to/</guid>
      <description>Embrace serverless computing with Flogo&amp;rsquo;s first class support for AWS Lambda. Infinitely scale Flogo&amp;rsquo;s ultralight functions and scale back to zero when not in use with AWS Lambda&amp;rsquo;s NoOps and seamless scaling capabilities.
We&amp;rsquo;ll guide you through the set of steps required to build the most basic of functions for deployment to AWS Lambda. The flow you&amp;rsquo;ll build will be the function you deploy.</description>
    </item>
    
    <item>
      <title>Building the docs website</title>
      <link>https://tibcosoftware.github.io/flogo/contributing/contribute-to-docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/contributing/contribute-to-docs/</guid>
      <description>If you want to contribute to the documentation, that is awesome! Your help is very much appreciated, but please do keep in mind the instructions below.
Prerequisites These documentation pages are built with Hugo and we do make some assumptions:
 You have Git 2.5 or greater installed on your machine. You have a GitHub account. Signing up for GitHub is free. You have Hugo installed on your machine.  In Hugo, pages are the core of your site.</description>
    </item>
    
    <item>
      <title>Contributing to the Showcase</title>
      <link>https://tibcosoftware.github.io/flogo/contributing/contribute-to-showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/contributing/contribute-to-showcase/</guid>
      <description>Have an activity, trigger or app that you want to share with the Flogo comunity? That&amp;rsquo;s awesome! To contribute to the showcase follow the steps below.
Folders The showcase is located at the root of the flogo repo and is structured as follows.
showcases â”œâ”€â”€ data â”‚ â”œâ”€â”€ items.toml &amp;lt;-- the showcase data file  items.toml is the file that you&amp;rsquo;ll need to edit to add your activity, trigger or app.</description>
    </item>
    
  </channel>
</rss>